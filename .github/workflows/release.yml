name: Release

on:
  push:
    branches: [master]

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always

jobs:
  # Check if we should create a release
  check-release:
    name: Check Release Needed
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install semantic-release
        run: |
          npm install --save-dev semantic-release@21 \
            @semantic-release/commit-analyzer@11 \
            @semantic-release/release-notes-generator@12 \
            @semantic-release/github@9 \
            @semantic-release/changelog@6 \
            @semantic-release/git@10 \
            conventional-changelog-conventionalcommits@7 \
            semantic-release-cargo@2

      - name: Check if release needed
        id: check
        run: |
          # Dry run to check if release would happen
          set +e  # Don't exit on error
          OUTPUT=$(npx semantic-release --dry-run 2>&1)
          EXIT_CODE=$?
          set -e  # Re-enable exit on error

          echo "$OUTPUT"
          echo "Exit code: $EXIT_CODE"

          # Check if a new version would be published
          if echo "$OUTPUT" | grep -q "The next release version is"; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "✅ Release will be created"
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "ℹ️  No release needed"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Build artifacts for all platforms
  build-artifacts:
    name: Build ${{ matrix.target }}
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: janus
            asset_name: janus-linux-x86_64

          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: janus
            asset_name: janus-linux-x86_64-musl

          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: janus
            asset_name: janus-macos-x86_64

          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: janus
            asset_name: janus-macos-aarch64

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: janus.exe
            asset_name: janus-windows-x86_64.exe

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools (Linux musl)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --locked --target ${{ matrix.target }}

      - name: Strip binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Create archive
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a ../../../${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
          else
            tar czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.asset_name }}
          path: |
            ${{ matrix.asset_name }}.tar.gz
            ${{ matrix.asset_name }}.zip
          if-no-files-found: ignore

  # Semantic release with artifacts
  release:
    name: Semantic Release
    needs: [check-release, build-artifacts]
    if: needs.check-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install semantic-release
        run: |
          npm install --save-dev semantic-release@21 \
            @semantic-release/commit-analyzer@11 \
            @semantic-release/release-notes-generator@12 \
            @semantic-release/github@9 \
            @semantic-release/changelog@6 \
            @semantic-release/git@10 \
            conventional-changelog-conventionalcommits@7 \
            semantic-release-cargo@2

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Prepare artifacts for release
        run: |
          mkdir -p release-artifacts
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} release-artifacts/ \;
          ls -lh release-artifacts/

      - name: Create .releaserc.json
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["master"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              "semantic-release-cargo",
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md", "Cargo.toml", "Cargo.lock"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              [
                "@semantic-release/github",
                {
                  "assets": [
                    {"path": "release-artifacts/*.tar.gz", "label": "Binary (tar.gz)"},
                    {"path": "release-artifacts/*.zip", "label": "Binary (zip)"}
                  ]
                }
              ]
            ]
          }
          EOF

      - name: Run semantic-release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Verify release
  verify-release:
    name: Verify Release
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: echo "tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

      - name: Verify release exists
        run: |
          echo "Latest tag: ${{ steps.get_tag.outputs.tag }}"
          echo "Verifying GitHub release..."
          gh release view ${{ steps.get_tag.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
